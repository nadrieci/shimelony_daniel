data_table <- data.frame(names(qtl_table[[1]]),qtl_table[1])
if(length(names(qtl_table))>1){#If the user only picks one chr the bucle for can't be performed
for(i in 2:length(names(qtl_table))){
data_table <- data.frame(data_table,names(qtl_table[[i]]),qtl_table[i])
}}
data_table <- (data_table[,-grep("Var",colnames(data_table))])
data_table <- t(data_table)
rownames(data_table) <- new_names
colnames_data_table <- NULL
for(i in 1:length(colnames(data_table))){
colnames_data_table <- c(colnames_data_table, paste0("QTL",i))
}
colnames_data_table <- c(colnames_data_table,"Total")
data_table <- data.frame(data_table, total_genes)
colnames(data_table) <- colnames_data_table
return(data_table)
}
initial_table_summary <- markdown_table_summary(file)
unique_chr <- unique(file$Chr)
table_genes <- NULL
for(i in 1:length(unique_chr)){
table_genes[[i]] <- subset(file$QTL, file$Chr == unique_chr[i])
}
names(table_genes) <- unique_chr
qtl_table <- NULL
for(i in 1:length(table_genes)){
qtl_table[[i]] <- table(table_genes[i])[which(table(table_genes[i])!=0)]
}
names(qtl_table) <- unique_chr
names(which(unlist(qtl_table) == max(unlist(qtl_table))))
max(unlist(qtl_table))
max(unlist(qtl_table))
names(which(unlist(qtl_table) == max(unlist(qtl_table))))
splited_max <-strsplit(names(which(unlist(qtl_table) == max(unlist(qtl_table)))),"")
max_qtl_chr_name <- paste0(splited_max[[1]][1:5], collapse = "")#Chr of the maximum qtl
max_qtl_name <- paste0(splited_max[[1]][7:length(splited_max[[1]])], collapse = "") #Maximum qtl
new_names <- NULL
total_genes <- NULL
max_chr <- length(table_genes[[1]])
name_max_chr <- names(table_genes[1])
for(i in 1:length(names(qtl_table))){
new_names <- c(new_names, paste(names(qtl_table)[i],"QTL"),paste(names(qtl_table)[i],"genes"))
total_genes <- c(total_genes, paste("Total",names(table_genes[i])),length(table_genes[[i]]))
if(length(table_genes[[i]])> max_chr){
max_chr <- length(table_genes[[i]])
name_max_chr <- names(table_genes[i])
}
}
qtl_table <- lapply(qtl_table, `length<-`, max(lengths(qtl_table)))#Make all the rows of the same length by adding NA's
data_table <- data.frame(names(qtl_table[[1]]),qtl_table[1])
if(length(names(qtl_table))>1){#If the user only picks one chr the bucle for can't be performed
for(i in 2:length(names(qtl_table))){
data_table <- data.frame(data_table,names(qtl_table[[i]]),qtl_table[i])
}}
data_table <- (data_table[,-grep("Var",colnames(data_table))])
data_table <- t(data_table)
rownames(data_table) <- new_names
colnames_data_table <- NULL
for(i in 1:length(colnames(data_table))){
colnames_data_table <- c(colnames_data_table, paste0("QTL",i))
}
colnames_data_table <- c(colnames_data_table,"Total")
data_table <- data.frame(data_table, total_genes)
colnames(data_table) <- colnames_data_table
data_table
splited_max
max_qtl_chr_name
max_qtl_name
max(unlist(qtl_table))
qtl_table
unlist(qtl_table)
max(unlist(qtl_table))
max(unlist(qtl_table))
max(unlist(qtl_table))
qtl_table <- NULL
for(i in 1:length(table_genes)){
qtl_table[[i]] <- table(table_genes[i])[which(table(table_genes[i])!=0)]
}
names(qtl_table) <- unique_chr
names(which(unlist(qtl_table) == max(unlist(qtl_table))))
splited_max <- strsplit(names(which(unlist(qtl_table) == max(unlist(qtl_table)))),"")
max(unlist(qtl_table))
View(qtl_table)
initial_parameters <- list(max_qtl,max_qtl_chr_name, max_qtl_name, max_chr, name_max_chr)
max_qtl <- max(unlist(qtl_table))
max_qtl_chr_name <- paste0(splited_max[[1]][1:5], collapse = "")#Chr of the maximum qtl
max_qtl_name <- paste0(splited_max[[1]][7:length(splited_max[[1]])], collapse = "") #Maximum qtl
new_names <- NULL
total_genes <- NULL
max_chr <- length(table_genes[[1]])
for(i in 1:length(names(qtl_table))){
new_names <- c(new_names, paste(names(qtl_table)[i],"QTL"),paste(names(qtl_table)[i],"genes"))
total_genes <- c(total_genes, paste("Total",names(table_genes[i])),length(table_genes[[i]]))
if(length(table_genes[[i]])> max_chr){
max_chr <- length(table_genes[[i]])
name_max_chr <- names(table_genes[i])
}
}
name_max_chr <- names(table_genes[1])
initial_parameters <- list(max_qtl,max_qtl_chr_name, max_qtl_name, max_chr, name_max_chr)
initial_parameters
initial_parameters <- c(max_qtl,max_qtl_chr_name, max_qtl_name, max_chr, name_max_chr)
initial_parameters
initial_parameters[2]==initial_parameters[4]
initial_parameters[2]==initial_parameters[5]
?ifelse
ifelse(initial_parameters[2]==initial_parameters[5], c(initial_parameters,"likewise"),c(initial_parameters,"unlike"))
initial_parameters
ifelse(initial_parameters[2]==initial_parameters[5], initial_parameters <- c(initial_parameters,"likewise"),initial_parameters <- c(initial_parameters,"unlike"))
initial_parameters
markdown_table_summary <- function(file){
unique_chr <- unique(file$Chr)
table_genes <- NULL
for(i in 1:length(unique_chr)){
table_genes[[i]] <- subset(file$QTL, file$Chr == unique_chr[i])
}
names(table_genes) <- unique_chr
qtl_table <- NULL
for(i in 1:length(table_genes)){
qtl_table[[i]] <- table(table_genes[i])[which(table(table_genes[i])!=0)]
}
names(qtl_table) <- unique_chr
names(which(unlist(qtl_table) == max(unlist(qtl_table))))
splited_max <- strsplit(names(which(unlist(qtl_table) == max(unlist(qtl_table)))),"")
max_qtl <- max(unlist(qtl_table))
max_qtl_chr_name <- paste0(splited_max[[1]][1:5], collapse = "")#Chr of the maximum qtl
max_qtl_name <- paste0(splited_max[[1]][7:length(splited_max[[1]])], collapse = "") #Maximum qtl
new_names <- NULL
total_genes <- NULL
max_chr <- length(table_genes[[1]])
name_max_chr <- names(table_genes[1])
for(i in 1:length(names(qtl_table))){
new_names <- c(new_names, paste(names(qtl_table)[i],"QTL"),paste(names(qtl_table)[i],"genes"))
total_genes <- c(total_genes, paste("Total",names(table_genes[i])),length(table_genes[[i]]))
if(length(table_genes[[i]])> max_chr){
max_chr <- length(table_genes[[i]])
name_max_chr <- names(table_genes[i])
}
}
initial_parameters <- c(max_qtl,max_qtl_chr_name, max_qtl_name, max_chr, name_max_chr)
ifelse(initial_parameters[2]==initial_parameters[5], initial_parameters <- c(initial_parameters,"likewise"),initial_parameters <- c(initial_parameters,"unlike"))
qtl_table <- lapply(qtl_table, `length<-`, max(lengths(qtl_table)))#Make all the rows of the same length by adding NA's
data_table <- data.frame(names(qtl_table[[1]]),qtl_table[1])
if(length(names(qtl_table))>1){#If the user only picks one chr the bucle for can't be performed
for(i in 2:length(names(qtl_table))){
data_table <- data.frame(data_table,names(qtl_table[[i]]),qtl_table[i])
}}
data_table <- (data_table[,-grep("Var",colnames(data_table))])
data_table <- t(data_table)
rownames(data_table) <- new_names
colnames_data_table <- NULL
for(i in 1:length(colnames(data_table))){
colnames_data_table <- c(colnames_data_table, paste0("QTL",i))
}
colnames_data_table <- c(colnames_data_table,"Total")
data_table <- data.frame(data_table, total_genes)
colnames(data_table) <- colnames_data_table
return(list(data_table, initial_parameters))
}
initial_table_summary <- markdown_table_summary(file)
initial_table_summary[1]
initial_table_summary[2]
initial_table_summary[1]
initial_table_summary[2]
initial_table_summary[2][1]
initial_table_summary[2][[1]]
initial_table_summary[[2]]
initial_table_summary[[2]][1]
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
final_table_summary <- markdown_table_summary(filtered_table)
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
library(knitr)
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runGitHub("shinyCircos", "venyao")
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
input[[paste("type_graph",tabIndex(), sep="_")]]
input[[paste("categorical",tabIndex(), sep="_")]]
input[[paste("numerical",tabIndex(), sep="_")]]
input[[paste("categorical2",tabIndex(), sep="_")]]
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
plot_all(filtering(),input[[paste("type_graph",tabIndex(), sep="_")]],input[[paste("categorical",tabIndex(), sep="_")]],
input[[paste("numerical",tabIndex(), sep="_")]], input[[paste("categorical2",tabIndex(), sep="_")]])
input[[paste("type_graph",tabIndex(), sep="_")]]
input[[paste("numerical",tabIndex(), sep="_")]]
input[[paste("categorical",tabIndex(), sep="_")]]
runApp('C:/Users/Daniel/Desktop/shimelony')
input[[paste("type_graph",tabIndex(), sep="_")]]
input[[paste("categorical",tabIndex(), sep="_")]]
tabIndex()
input[[paste("categorical",1, sep="_")]]
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
input[[paste("categorical",tabIndex(), sep="_")]]
input[[paste("categorical",1, sep="_")]]
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
?lengthMenu
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
?renderDataTable
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
?conditionalPanel
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
input$plot_1
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
condition = "input.plot_1 == 0"
input$plot.1
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
?write.csv
?file.copy
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
input[[paste("type_graph",tabIndex(), sep="_")]]
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
?last_plot()
list.files()
?list.files
getwd()
list.files(www/images)
list.files(C:\Users\Daniel\Desktop\shimelony\www\images)
list.files(C:/Users/Daniel/Desktop/shimelony/www/images)
list.files("C:/Users/Daniel/Desktop/shimelony/www/images")
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
setwd("C:/Users/Daniel/Desktop/shimelony/www/images")
![](plot1.png)
setwd("C:/Users/Daniel/Desktop/shimelony/www/images")
![image1](plot1.png)
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
files <- list.files(path = 'C:/Users/Daniel/Desktop/shimelony/www/images/',
pattern = '\\.png', full.names = T)
for(f in files) cat(paste0('![](',f,')\n'))
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
View(file_plot)
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
file_plot <- t(file_plot[,names(which(lapply(file_plot, class)=="numeric"))[c(-1,-2)]])
View(file_plot)
file_plot <- file_plot[,which(!apply(file_plot,2,sd)==0)]
head(file_plot)
View(file_plot)
file_plot <- file_plot[,1:30]
corr <- round(cor(file_plot), 1)
View(file_plot)
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of genes",
ggtheme=theme_bw)
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of genes",
ggtheme=theme_bw)
a <-  ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of genes",
ggtheme=theme_bw)
a
a
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
?helpText
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
nrow(filtering())
runApp('C:/Users/Daniel/Desktop/shimelony')
?textOutput
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp('C:/Users/Daniel/Desktop/shimelony')
shiny::runApp()
shiny::runApp()
library(shiny)
install.packages("yaml")
install.packages("Rcpp")
shiny::runApp()
install.packages("scales")
runApp()
install.packages("rlang")
runApp()
install.packages("glue")
runApp()
install.packages("robustbase")
runApp()
install.packages("kernlab")
runApp()
install.packages("caTools")
runApp()
runApp()
runApp()
install.packages("stringi")
runApp()
runApp()
runApp()
runApp()
input$sintope
runApp()
runApp()
tope
input$sintope
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
newtop()
newtope()
tope
!is.null(newtope())
newtope()
a <- newtope()
a
is.null(newtope())
runApp()
runApp()
runApp()
runApp()
runApp()
newtope()
a <- newtope()
runApp()
input$sintope
?checkboxInput
runApp()
input$sintope
runApp()
runApp()
runApp()
input$sintope
runApp()
runApp()
runApp()
input$sintope
runApp()
runApp()
?observe
runApp()
runApp()
runApp()
input$sintope
runApp()
runApp()
runApp()
runApp()
?isolate
runApp()
